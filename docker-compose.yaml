version: '3.8'

services:
  db:
    image: postgres:16.2
    restart: always
    volumes:
      - secret_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: secret_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "54322:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

  secretapp:
    build:
      dockerfile: ./Dockerfile
    command: >
      sh -c '/wait-for-it.sh db:5432 -- python manage.py runserver 0.0.0.0:8080'
    ports:
      - "8000:8080"
    environment:
      - DATABASE_NAME=secret_db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=admin
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
    depends_on:
      - db
    networks:
      - default

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - default

  celery_worker:
    image: secretapp
    command: sh -c "cd Market_intelligence && celery -A Market_intelligence worker --loglevel=INFO -P gevent"
    depends_on:
      - db
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/secretapp/
    networks:
      - default

  celery_beat:
    image: secretapp
    command: sh -c "cd Market_intelligence && celery -A Market_intelligence beat --loglevel=INFO"
    depends_on:
      - db
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/secretapp/
    networks:
      - default

networks:
  default:
    driver: bridge

volumes:
  secret_postgres_data:
    external: true

# docker build . -t secretapp

# docker volume create secret_postgres_data
# docker-compose up -d

# docker-compose run contentapp python manage.py test - для правильного выполнения тестов в контейнере
# python manage.py test contentapp.tests  - временное решение для работы с тестовой локальной БД


# docker-compose up --build

# cd Market_intelligence
# celery -A Market_intelligence worker --loglevel=DEBUG -P gevent - запуск воркеров с пулом процессов gevent

# cd Market_intelligence
# python manage.py runserver

# celery -A Market_intelligence beat --loglevel=DEBUG - запуск Celery Beat (планирование и отправка задач в очередь)
